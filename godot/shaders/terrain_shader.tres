[gd_resource type="Shader" format=3 uid="uid://cj5ui8mbwgx27"]

[resource]
code = "// NOTE: Shader automatically converted from Godot Engine 4.2.stable's StandardMaterial3D.

shader_type spatial;
//render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_burley, specular_schlick_ggx;
render_mode blend_mix, depth_draw_never, cull_back, diffuse_burley, specular_schlick_ggx;

#include \"terrain_tools.gdshaderinc\"

uniform float tile_margin : hint_range(0, 1) = .1;
uniform vec2 uv_terrain_scale = vec2(1.0, 1.0);
uniform vec2 uv_terrain_offset;
//uniform float depth_offset : hint_range(0, 1) = 0;

group_uniforms Albedo;
uniform vec4 albedo : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;

group_uniforms Metalic;
uniform float metallic;
uniform sampler2D texture_metallic : filter_linear_mipmap, repeat_enable, hint_default_white;
uniform vec4 metallic_texture_channel;

group_uniforms Roughness;
uniform float roughness : hint_range(0, 1);
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

group_uniforms Specular;
uniform float specular;

group_uniforms Normal;
uniform sampler2D texture_normal : hint_roughness_normal, filter_linear_mipmap, repeat_enable;
uniform float normal_scale : hint_range(-16, 16);


group_uniforms Mask;
uniform vec4 mask_channel : source_color = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D texture_mask : source_color, filter_linear_mipmap, repeat_enable, hint_default_black;
uniform vec2 uv_mask_scale = vec2(1.0, 1.0);
uniform vec2 uv_mask_offset;
uniform float mask_scale = 1.0;

varying vec2 mask_uv;
varying vec2 terrain_uv;
//varying float z_dist;

void vertex() {
	//UV=UV*uv1_scale.xy+uv1_offset.xy;
	mask_uv = UV * uv_mask_scale.xy + uv_mask_offset.xy;
	terrain_uv = UV * uv_terrain_scale.xy + uv_terrain_offset.xy;
//	z_dist = clamp((MODELVIEW_MATRIX * vec4(VERTEX, 1.0)).z * -1.0, 0.0, 50.0);
}


void fragment() {

	vec4 albedo_tex = sample_tiling(texture_albedo, terrain_uv, tile_margin);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(sample_tiling(texture_albedo, terrain_uv, tile_margin), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(sample_tiling(texture_albedo, terrain_uv, tile_margin), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	NORMAL_MAP = sample_tiling(texture_albedo, terrain_uv, tile_margin).rgb;
	NORMAL_MAP_DEPTH = normal_scale;
	
	SPECULAR = specular;
	
	ALPHA = dot(texture(texture_mask, mask_uv) * mask_scale, mask_channel);
//	DEPTH = FRAGCOORD.z - depth_offset;
}
"
